generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id                 Int       @id @default(autoincrement())
  name               String    @db.VarChar(100)
  description        String?
  parentCategoryId   Int?
  level              Int?
  path               String?   @db.VarChar(100)
  slug               String?   @db.VarChar(100) @unique
  status             String    @default("available")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  parentCategory     Category? @relation("CategoryToCategory", fields: [parentCategoryId], references: [id])
  childCategories    Category[] @relation("CategoryToCategory")
  attributes         CategoryAttribute[]
  products           Product[]

  @@map("categories")
}

model CategoryAttribute {
  id         Int       @id @default(autoincrement())
  categoryId Int      
  name       String    @db.VarChar(50)
  value      Json
  formName   String?   @db.VarChar(20)
  formType   String?   @db.VarChar(20)
  slug       String?   @db.VarChar(100)
  require    Boolean   @default(false)
  status     String    @default("available")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  category   Category  @relation(fields: [categoryId], references: [id])
  attributeValues AttributeValue[]
  @@map("category_attributes")
}

model AttributeValue {
  id           Int       @id @default(autoincrement())
  attributeId  Int
  value        Json
  status       String    @default("available")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  attribute    CategoryAttribute @relation(fields: [attributeId], references: [id])
  productAttributeValues ProductAttributeValue[]
  @@map("attribute_values")
}

model ProductAttributeValue {
  productId       Int
  attributeValueId Int
  status          String    @default("available")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  product         Product   @relation(fields: [productId], references: [id])
  attributeValue  AttributeValue @relation(fields: [attributeValueId], references: [id])
  @@id([productId, attributeValueId])
  @@map("product_attribute_values")
}



model Product {
  id                 Int       @id @default(autoincrement())
  name               String    @db.VarChar(200)
  categoryId         Int
  sellerId           Int
  hasClassification  Boolean   @default(false)
  slug               String?   @db.VarChar(100)
  status             String    @default("available")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  category           Category  @relation(fields: [categoryId], references: [id])
  seller             User      @relation(fields: [sellerId], references: [id])
  attributeValues    ProductAttributeValue[]
  classificationGroups ClassificationGroup[]
  classifications    ProductClassification[] 
  cartItems          CartItem[]
  orderItems         OrderItem[]
  preOrders          PreOrder[]
  images             Image[]
  @@map("products")
}


model Image {
  id           Int      @id @default(autoincrement())
  productId    Int
  name         String 
  path         String
  contentType  String
  publicId     String
  size         Int
  isThumbnail  Boolean
  isEliminated Boolean
  product      Product   @relation(fields: [productId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  @@map("image_product")
}


model ClassificationGroup {
  id        Int       @id @default(autoincrement())
  productId Int
  name      String    @db.VarChar(50)
  status    String    @default("available")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  product   Product   @relation(fields: [productId], references: [id])
  options   ClassificationOption[]

  @@map("classification_groups")
}

model ClassificationOption {
  id        Int       @id @default(autoincrement())
  groupId   Int
  name      String    @db.VarChar(50)
  status    String    @default("available")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  group     ClassificationGroup @relation(fields: [groupId], references: [id])
  option1Classifications ProductClassification[] @relation("Option1")
  option2Classifications ProductClassification[] @relation("Option2")

  @@map("classification_options")
}

model ProductClassification {
  id        Int       @id @default(autoincrement())
  productId Int
  option1Id Int
  option2Id Int?
  price     Decimal   @db.Decimal(10, 2)
  stock     Int
  status    String    @default("available")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  product   Product   @relation(fields: [productId], references: [id])
  option1   ClassificationOption @relation("Option1", fields: [option1Id], references: [id])
  option2   ClassificationOption? @relation("Option2", fields: [option2Id], references: [id])
  cartItems CartItem[]
  orderItems OrderItem[]
  preOrders PreOrder[]

  @@map("product_classifications")
}

model User {
  id                 Int        @id @default(autoincrement())
  username           String     @unique @db.VarChar(50)
  passwordSalt       String     @db.VarChar(255)
  passwordHash       String     @db.VarChar(255)
  passwordIterations Int        @default(10000)  
  avatar             String?      
  email              String     @unique @db.VarChar(100)
  fullName           String?    @db.VarChar(100)
  emailVerified      Boolean    @default(false)    
  verificationToken  String?                  
  tokenExpiry        DateTime?                  
  userType           UserType   @default(CUSTOMER)
  status             UserStatus @default(AVAILABLE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deletedAt          DateTime?
  products           Product[]
  cart               Cart?
  orders             Order[]
  preOrders          PreOrder[]
  notifications      Notification[]
  @@map("users")
}

enum UserType {
  SELLER
  CUSTOMER
  ADMIN
}

enum UserStatus {
  AVAILABLE
  UNAVAILABLE
  BLOCKED
}


model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  status    String    @default("available")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id                 Int       @id @default(autoincrement())
  cartId             Int
  productId          Int
  classificationId   Int?
  quantity           Int
  status             String    @default("available")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  cart               Cart      @relation(fields: [cartId], references: [id])
  product            Product   @relation(fields: [productId], references: [id])
  classification     ProductClassification? @relation(fields: [classificationId], references: [id])

  @@map("cart_items")
}

model Order {
  id          Int       @id @default(autoincrement())
  userId      Int
  orderDate   DateTime  @default(now())
  totalAmount Decimal   @db.Decimal(10, 2)
  status      String    @default("Pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  user        User      @relation(fields: [userId], references: [id])
  items       OrderItem[]
  cancellation OrderCancellation?

  @@map("orders")
}

model OrderItem {
  id                 Int       @id @default(autoincrement())
  orderId            Int
  productId          Int
  classificationId   Int?
  quantity           Int
  price              Decimal   @db.Decimal(10, 2)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  order              Order     @relation(fields: [orderId], references: [id])
  product            Product   @relation(fields: [productId], references: [id])
  classification     ProductClassification? @relation(fields: [classificationId], references: [id])

  @@map("order_items")
}

model PreOrder {
  id                 Int       @id @default(autoincrement())
  userId             Int
  productId          Int
  classificationId   Int?
  quantity           Int
  expectedDeliveryDate DateTime
  status             String    @default("Pending")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  user               User      @relation(fields: [userId], references: [id])
  product            Product   @relation(fields: [productId], references: [id])
  classification     ProductClassification? @relation(fields: [classificationId], references: [id])

  @@map("pre_orders")
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int
  message   String
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model OrderCancellation {
  id           Int      @id @default(autoincrement())
  orderId      Int      @unique
  reason       String
  cancelledAt  DateTime @default(now())
  order        Order    @relation(fields: [orderId], references: [id])
  
  @@map("order_cancellations")
}

